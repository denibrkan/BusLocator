@inject HttpClient httpClient
@inject IDialogService DialogService
@page "/"
@page "/lines"

<PageTitle>@Strings.Lines</PageTitle>

<div class="d-flex justify-space-between">
    <MudText Typo="Typo.h5">@Strings.Lines</MudText>
    <MudButton Href="/lines/add" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">@Strings.Add</MudButton>
</div>
<MudDivider Class="my-3" />
<MudTable @ref="_table" ServerData="@(new Func<TableState, Task<TableData<LineDto>>>(LoadLines))" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
          OnRowClick="(TableRowClickEventArgs<LineDto> e) => HandleRowClicked(e)" RowsPerPage="10" RowClass="cursor-pointer" Dense="true">
    <ToolBarContent>
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Traži" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="@nameof(LineDto.Number)" T="LineDto">@Strings.Number</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="@nameof(LineDto.Name)" T="LineDto">@Strings.Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="@nameof(LineDto.Price)" T="LineDto">@Strings.Price</MudTableSortLabel></MudTh>
        <MudTh>@Strings.Duration</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Number</MudTd>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.Price</MudTd>
        <MudTd>@context.Duration</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>@Strings.NoData</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager Class="grey-text text-darken-2" Style="font-size: 0.8rem" InfoFormat="@Strings.PagingInfoLabel" PageSizeOptions="new int[]{5, 10, 25, 50}" RowsPerPageString="@Strings.RowsPerPage" />
    </PagerContent>
</MudTable>

@code {
    private bool _loading;
    private string _searchText = string.Empty;
    private MudTable<LineDto> _table = null!;
    private IEnumerable<LineDto> _lines = new List<LineDto>();

    private async Task<TableData<LineDto>> LoadLines(TableState tableState)
    {
        if (tableState.SortLabel != string.Empty && tableState.SortDirection == SortDirection.None)
            tableState.SortLabel = string.Empty;

        var searchObject = new LineSearchObject { Page = ++tableState.Page, PageSize = tableState.PageSize, OrderBy = tableState.SortLabel, OrderAsc = tableState.SortDirection == SortDirection.Ascending ? true : false, SearchText = _searchText };
        string queryParams = QueryParams.GenerateQueryParams(searchObject);

        _loading = true;
        var lineData = await httpClient.GetFromJsonAsync<PagedList<LineDto>>($"http://localhost:5001/api/lines?{queryParams}");
        _loading = false;

        return new TableData<LineDto> { Items = lineData.Items, TotalItems = lineData.TotalCount };
    }

    private async void HandleRowClicked(TableRowClickEventArgs<LineDto> row)
    {
        await OpenEditModal(row.Item);
    }

    private async Task OpenEditModal(LineDto line)
    {
        var dialogParameters = new DialogParameters<LineEditModal>();
        dialogParameters.Add((x) => x.Line, line);

        var dialogRef = await DialogService.ShowAsync<LineEditModal>($"Uredi liniju #{line.Number}", dialogParameters, new DialogOptions { FullWidth = true });
        var result = await dialogRef.Result;

        if (!result.Canceled)
            await _table.ReloadServerData();
    }

    private void OnSearch(string text)
    {
        _searchText = text;
        _table.ReloadServerData();
    }
}